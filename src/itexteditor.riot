<itexteditor>
    <jlabel field={props.field}></jlabel>
    <jtooltip tip={props.field.tip}></jtooltip>
    <template if={props.field.multilang} each={lang in props.attr.langs}>
        <button type="button" class="btn {btnLangColor(lang)} btn-sm ml-1" style="text-transform: capitalize;" idLang={lang} onclick={selectLang}>{langName(lang)} <span class="aaainputFeedback"></span></button>
    </template>
    <span class="inputFeedback"></span>
    <small class="inputFeedbackMsg"></small>

    <div each={lang in state.langs} class="ianput-group {lang==state.currentLang || !lang?'':'hide'}">
        <div id={buildId(lang,'_')}></div>
        <input type="hidden" defaultLang={state.defaultLang} lang={lang} baseId={props.field.id} name={buildId(lang)} value={props.field.value} class="form-control">
        


        <div if={props.field.multilang && props.attr.proposeTranslate && state.defaultLang !=lang } class="h-100 input-group-append">
            <button type="button" class="btn btn-info" onclick={translate}><i class="fas fa-language"></i></button>
        </div>
    </div>
    <jhelp help={props.field.help}></jhelp>

    <script>
        export default {
            onBeforeMount() {
                this.state.currentLang = this.props.attr.langs[0]
                this.state.defaultLang = this.props.attr.langs[0]
                if (this.props.field.multilang) {
                    this.state.langs = this.props.attr.langs
                } else {
                    this.state.langs = ['']
                }
                if (this.props.type == 'datetime') this.state.type = 'datetime-local'
                else this.state.type = this.props.field.type
            },
            onMounted() {
                //https://quilljs.com/
                const self=this
                this.state.langs.forEach(function(lang) {
                    var container = '#'+ self.buildId(lang,'_')
                    var editor = new Quill(container, {
                        modules: {
                            toolbar: [
                                [{
                                    header: [1, 2, false]
                                }],
                                ['bold', 'italic', 'underline'],
                                ['image', 'code-block']
                            ]
                        },
                        theme: 'snow'
                    })
                })
            },
            btnLangColor(lang) {
                return lang == this.state.currentLang ? 'btn-secondary' : 'btn-light'
            },
            buildId(lang,separator) {
                return this.props.field.multilang ? this.props.field.id + (separator || '.') + lang : this.props.field.id
            },
            defaultValue() {
                if (this.state.currentLang == this.props.attr.langs[0]) return this.props.field.value
                else return null
            },
            selectLang(ev) {
                this.state.currentLang = ev.target.attributes.idLang.value
                this.update()
            }
        }

    </script>
</itexteditor>
